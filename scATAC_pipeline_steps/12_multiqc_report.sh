#!/bin/bash
#SBATCH --job-name=multiqc_report
#SBATCH --output=logs/12_multiqc_report.out
#SBATCH --error=logs/12_multiqc_report.err
#SBATCH --cpus-per-task=4
#SBATCH --mem=16G
#SBATCH --time=2:00:00
#SBATCH --partition=workq

# Set up conda environment
source /opt/common/tools/ric.cosr/miniconda3/bin/activate
conda activate alignment_two

set -euo pipefail

OUTPUT_DIR="/beegfs/scratch/ric.sessa/kubacki.michal/SRF_Linda/ATAC_data/chromap_final_output"
SAMPLES=("R26-Nestin-Ctrl-adult" "R26-Nestin-Mut-adult")

echo "========================================="
echo "Step 12: Creating MultiQC Report for scATAC-seq"
echo "Start time: $(date)"
echo "========================================="

# Create MultiQC output directory
mkdir -p "$OUTPUT_DIR/multiqc_report"

cd "$OUTPUT_DIR"

# Check if MultiQC is installed
if ! command -v multiqc &> /dev/null; then
    echo "INFO: MultiQC not found. Installing MultiQC..."
    pip install multiqc
    if [[ $? -ne 0 ]]; then
        echo "ERROR: Failed to install MultiQC"
        exit 1
    fi
fi

echo "DEBUG: MultiQC found: $(which multiqc)"
echo "DEBUG: MultiQC version: $(multiqc --version)"

# Create custom MultiQC configuration for scATAC-seq
cat > multiqc_report/multiqc_config.yaml << 'EOF'
title: "scATAC-seq Quality Control Report"
subtitle: "R26-Nestin Control vs Mutant Analysis"
intro_text: |
    This report summarizes quality control metrics for single-cell ATAC-seq data processing.
    The analysis includes chromatin accessibility profiling, peak calling, and cellular quality metrics.

report_comment: |
    Generated by scATAC-seq pipeline for R26-Nestin samples.
    Report includes fragment statistics, TSS enrichment, library complexity, and peak analysis.

module_order:
    - custom_content
    - fastqc
    - cutadapt
    - samtools
    - picard
    - macs2

custom_data:
    section_name: "scATAC-seq Quality Metrics"
    description: "Custom metrics specific to single-cell ATAC-seq analysis"
    file_format: "tsv"
    plot_type: "table"

table_columns_visible:
    custom_content:
        Sample: True
        Total_fragments: True
        Unique_fragments: True
        Library_complexity: True
        TSS_enrichment_percent: True
        Total_peaks: True
        Mean_peaks_per_cell: True
        Total_barcodes: True

custom_css: |
    .mqc_header h1 { color: #2E86AB; }
    .mqc-section-plot { background-color: #f8f9fa; }

sp:
    custom_content:
        fn: "*.tsv"
EOF

# Collect and format QC metrics for MultiQC
echo "DEBUG: Collecting QC metrics from all samples..."

# Create comprehensive metrics table
echo -e "Sample\tTotal_fragments\tUnique_fragments\tLibrary_complexity\tTSS_enrichment_percent\tTotal_peaks\tMean_peaks_per_cell\tTotal_barcodes\tPromoter_percentage" > multiqc_report/scATAC_summary_mqc.tsv

for SAMPLE in "${SAMPLES[@]}"; do
    echo "DEBUG: Processing QC metrics for $SAMPLE..."
    
    # Initialize variables with defaults
    TOTAL_FRAGS="N/A"
    UNIQUE_FRAGS="N/A"
    LIB_COMPLEXITY="N/A"
    TSS_ENRICHMENT="N/A"
    TOTAL_PEAKS="N/A"
    MEAN_PEAKS_CELL="N/A"
    TOTAL_BARCODES="N/A"
    PROMOTER_PERCENT="N/A"
    
    # Extract metrics from QC files if they exist
    if [[ -f "qc_metrics/${SAMPLE}_library_complexity.txt" ]]; then
        TOTAL_FRAGS=$(grep "Total_fragments" "qc_metrics/${SAMPLE}_library_complexity.txt" | cut -f2)
        UNIQUE_FRAGS=$(grep "Unique_fragments" "qc_metrics/${SAMPLE}_library_complexity.txt" | cut -f2)
        LIB_COMPLEXITY=$(grep "Library_complexity" "qc_metrics/${SAMPLE}_library_complexity.txt" | cut -f2)
    fi
    
    if [[ -f "qc_metrics/${SAMPLE}_tss_stats.txt" ]]; then
        TSS_ENRICHMENT=$(grep "TSS_enrichment_percent" "qc_metrics/${SAMPLE}_tss_stats.txt" | cut -f2)
    fi
    
    if [[ -f "qc_metrics/${SAMPLE}_promoter_stats.txt" ]]; then
        TOTAL_PEAKS=$(grep "Total_peaks" "qc_metrics/${SAMPLE}_promoter_stats.txt" | cut -f2)
        PROMOTER_PERCENT=$(grep "Promoter_percentage" "qc_metrics/${SAMPLE}_promoter_stats.txt" | cut -f2)
    fi
    
    if [[ -f "qc_metrics/${SAMPLE}_fragments_per_cell.txt" ]]; then
        TOTAL_BARCODES=$(wc -l < "qc_metrics/${SAMPLE}_fragments_per_cell.txt")
        MEAN_PEAKS_CELL=$(awk '{sum+=$2; count++} END{if(count>0) print sum/count; else print "N/A"}' "qc_metrics/${SAMPLE}_fragments_per_cell.txt")
    fi
    
    # Add row to summary table
    echo -e "$SAMPLE\t$TOTAL_FRAGS\t$UNIQUE_FRAGS\t$LIB_COMPLEXITY\t$TSS_ENRICHMENT\t$TOTAL_PEAKS\t$MEAN_PEAKS_CELL\t$TOTAL_BARCODES\t$PROMOTER_PERCENT" >> multiqc_report/scATAC_summary_mqc.tsv
done

# Create fragment length distribution data for MultiQC
echo "DEBUG: Preparing fragment length distribution data..."
for SAMPLE in "${SAMPLES[@]}"; do
    if [[ -f "qc_metrics/${SAMPLE}_fragment_lengths.txt" ]]; then
        # Convert to MultiQC format
        echo "# plot_type: 'linegraph'" > "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "# section_name: 'Fragment Length Distribution'" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "# description: 'Distribution of fragment lengths for $SAMPLE'" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "# pconfig:" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "#     title: 'Fragment Length Distribution'" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "#     xlab: 'Fragment Length (bp)'" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "#     ylab: 'Count'" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        echo "Length_bp\t$SAMPLE" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
        
        # Add data (limit to reasonable range for visualization)
        awk 'NR<=1000 && $1<=1000 {print $1"\t"$2}' "qc_metrics/${SAMPLE}_fragment_lengths.txt" >> "multiqc_report/${SAMPLE}_fragment_lengths_mqc.txt"
    fi
done

# Create TSS enrichment profile data if available
echo "DEBUG: Preparing TSS enrichment profiles..."
for SAMPLE in "${SAMPLES[@]}"; do
    if [[ -f "qc_metrics/${SAMPLE}_tss_overlap.txt" ]]; then
        # Create simplified TSS profile for MultiQC
        echo "# plot_type: 'bargraph'" > "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
        echo "# section_name: 'TSS Enrichment'" >> "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
        echo "# description: 'TSS enrichment profile for $SAMPLE'" >> "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
        echo "Category\t$SAMPLE" >> "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
        
        # Calculate TSS overlap categories
        TOTAL_FRAGS=$(wc -l < "qc_metrics/${SAMPLE}_tss_overlap.txt")
        TSS_OVERLAPPING=$(awk '$5>0' "qc_metrics/${SAMPLE}_tss_overlap.txt" | wc -l)
        NON_TSS=$((TOTAL_FRAGS - TSS_OVERLAPPING))
        
        echo "TSS_overlapping\t$TSS_OVERLAPPING" >> "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
        echo "Non_TSS\t$NON_TSS" >> "multiqc_report/${SAMPLE}_tss_profile_mqc.txt"
    fi
done

# Create peaks per cell distribution
echo "DEBUG: Preparing peaks per cell data..."
for SAMPLE in "${SAMPLES[@]}"; do
    if [[ -f "qc_metrics/${SAMPLE}_fragments_per_cell.txt" ]]; then
        echo "# plot_type: 'histogram'" > "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "# section_name: 'Fragments per Cell'" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "# description: 'Distribution of fragments per cell for $SAMPLE'" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "# pconfig:" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "#     title: 'Fragments per Cell Distribution'" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "#     xlab: 'Fragments per Cell'" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "#     ylab: 'Number of Cells'" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        echo "Fragments\tCells" >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
        
        # Create histogram bins
        awk '{print $2}' "qc_metrics/${SAMPLE}_fragments_per_cell.txt" | \
        sort -n | \
        awk 'BEGIN{bin=0; count=0; binsize=1000} 
             {
                 current_bin=int($1/binsize)*binsize
                 if(current_bin != bin) {
                     if(count>0) print bin"\t"count
                     bin=current_bin
                     count=1
                 } else {
                     count++
                 }
             } 
             END{if(count>0) print bin"\t"count}' >> "multiqc_report/${SAMPLE}_peaks_per_cell_mqc.txt"
    fi
done

# Collect existing log files for MultiQC
echo "DEBUG: Collecting existing log files..."

# Copy relevant log files to MultiQC directory
mkdir -p multiqc_report/logs
if [[ -d "logs" ]]; then
    # Copy chromap logs
    find logs -name "*chromap*.log" -exec cp {} multiqc_report/logs/ \; 2>/dev/null || true
    
    # Copy SLURM output files
    find logs -name "*.out" -exec cp {} multiqc_report/logs/ \; 2>/dev/null || true
fi

# Create a comprehensive sample information file
echo "DEBUG: Creating sample information file..."
cat > multiqc_report/sample_info_mqc.yaml << EOF
sample_groups:
  - name: "Control"
    samples:
      - "R26-Nestin-Ctrl-adult"
    color: "#2E86AB"
  - name: "Mutant" 
    samples:
      - "R26-Nestin-Mut-adult"
    color: "#A23B72"

sample_names_rename:
  "R26-Nestin-Ctrl-adult": "Control"
  "R26-Nestin-Mut-adult": "Mutant"
EOF

# Create additional custom content
echo "DEBUG: Creating pipeline overview..."
cat > multiqc_report/pipeline_overview_mqc.txt << EOF
# section_name: "Pipeline Overview"
# description: "Overview of the scATAC-seq processing pipeline"
# plot_type: "table"

Step	Description	Status
1_Extract_Barcodes	Extract cell barcodes from FASTQ	Completed
2_Test_Barcodes	Validate barcode sequences	Completed  
3_Validate_Counts	Count validation analysis	Pending
4_Chromap_Alignment	Align reads and generate fragments	Completed
5_Call_Peaks	MACS2 peak calling	Pending
6_Peak_Cell_Matrix	Create peak-barcode matrix	Pending
7_Create_BigWig	Generate coverage tracks	Available
8_QC_Metrics	Comprehensive QC analysis	Available
9_Dimensionality_Reduction	LSI/PCA/UMAP clustering	Available
10_Integration_Prep	Prepare for scRNA integration	Available
11_GRN_Analysis	Gene regulatory network analysis	Available
12_MultiQC_Report	Generate quality report	Running
EOF

# Run MultiQC
echo "DEBUG: Running MultiQC to generate report..."

# Change to multiqc_report directory to run MultiQC
cd multiqc_report

multiqc . \
    --config multiqc_config.yaml \
    --title "scATAC-seq QC Report - R26-Nestin Analysis" \
    --comment "Single-cell ATAC-seq quality control analysis for R26-Nestin Control vs Mutant samples" \
    --filename "scATAC_QC_report" \
    --force \
    --verbose

if [[ $? -eq 0 ]]; then
    echo "DEBUG: MultiQC report generated successfully"
    
    # Display report location
    REPORT_PATH="$OUTPUT_DIR/multiqc_report/scATAC_QC_report.html"
    echo "MultiQC Report Generated:"
    echo "=========================="
    echo "Report Location: $REPORT_PATH"
    echo "Report Size: $(stat -c%s "$REPORT_PATH" 2>/dev/null || echo "N/A") bytes"
    
    # Create summary of included data
    echo "Report Contents:"
    echo "- Sample quality metrics summary table"
    echo "- Fragment length distributions"
    echo "- TSS enrichment profiles"  
    echo "- Fragments per cell distributions"
    echo "- Pipeline processing overview"
    echo "- Processing logs and statistics"
    
else
    echo "WARNING: MultiQC failed to generate report"
    echo "Check MultiQC installation and input files"
fi

# Create a simple HTML index if MultiQC failed
if [[ ! -f "scATAC_QC_report.html" ]]; then
    echo "DEBUG: Creating fallback HTML report..."
    cat > "scATAC_QC_fallback_report.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>scATAC-seq QC Report - R26-Nestin Analysis</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .header { color: #2E86AB; }
    </style>
</head>
<body>
    <h1 class="header">scATAC-seq Quality Control Report</h1>
    <h2>R26-Nestin Control vs Mutant Analysis</h2>
    
    <h3>Processing Status</h3>
    <p>This is a fallback report. Please install MultiQC for comprehensive visualization.</p>
    
    <h3>QC Data Files Generated</h3>
    <ul>
        <li>scATAC_summary_mqc.tsv - Main quality metrics table</li>
        <li>Fragment length distributions per sample</li>
        <li>TSS enrichment profiles</li>
        <li>Fragments per cell statistics</li>
    </ul>
    
    <h3>Next Steps</h3>
    <p>To generate the full MultiQC report, install MultiQC and re-run this script:</p>
    <code>pip install multiqc</code>
    
    <p>Report generated on: $(date)</p>
</body>
</html>
EOF
fi

cd "$OUTPUT_DIR"

echo "Output files created in: $OUTPUT_DIR/multiqc_report/"
echo "  - Main report: scATAC_QC_report.html (if MultiQC succeeded)"
echo "  - Configuration: multiqc_config.yaml"
echo "  - Summary data: scATAC_summary_mqc.tsv"
echo "  - Sample info: sample_info_mqc.yaml"
echo "  - Pipeline overview: pipeline_overview_mqc.txt"

echo "========================================="
echo "Step 12 complete"
echo "MultiQC report generation finished"
echo "End time: $(date)"
echo "========================================="